{"version":3,"sources":["../src/server.js"],"names":["app","mongoURL","blogDb","blogDbCollection","articles","use","bodyParser","json","get","req","res","withDB","db","articleName","params","name","collection","findOne","articleInfo","status","post","updateOne","upvotes","updatedArticleInfo","body","userName","text","comments","concat","listen","console","log","operations","MongoClient","connect","useNewUrlParser","client","close","message","error"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AACA,IAAMC,QAAQ,GAAG,2BAAjB;AACA,IAAMC,MAAM,GAAG,SAAf;AACA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AADa,CAAzB;AAIAJ,GAAG,CAACK,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AAEAP,GAAG,CAACQ,GAAJ,CAAQ,qBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA+B,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAC,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,wBAAAA,WADD,GACeJ,GAAG,CAACK,MAAJ,CAAWC,IAD1B;AAAA;AAAA,+BAGqBH,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCa,OAAzC,CAAiD;AAAEF,0BAAAA,IAAI,EAAEF;AAAR,yBAAjD,CAHrB;;AAAA;AAGCK,wBAAAA,WAHD;AAILR,wBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBW,WAArB;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD;;AAAA;AAAA;AAAA;AAAA,iBAKHR,GALG,CAAN;;AAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;AASAV,GAAG,CAACoB,IAAJ,CAAS,4BAAT;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACrCC,YAAAA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAC,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,wBAAAA,WADD,GACeJ,GAAG,CAACK,MAAJ,CAAWC,IAD1B;AAAA;AAAA,+BAGqBH,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCa,OAAzC,CAAiD;AAAEF,0BAAAA,IAAI,EAAEF;AAAR,yBAAjD,CAHrB;;AAAA;AAGCK,wBAAAA,WAHD;AAAA;AAAA,+BAICN,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCiB,SAAzC,CAAmD;AAAEN,0BAAAA,IAAI,EAAEF;AAAR,yBAAnD,EAA0E;AAC9E,kCAAQ;AACNS,4BAAAA,OAAO,EAAEJ,WAAW,CAACI,OAAZ,GAAsB;AADzB;AADsE,yBAA1E,CAJD;;AAAA;AAAA;AAAA,+BAU4BV,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCa,OAAzC,CAAiD;AAAEF,0BAAAA,IAAI,EAAEF;AAAR,yBAAjD,CAV5B;;AAAA;AAUCU,wBAAAA,kBAVD;AAYLb,wBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBgB,kBAArB;;AAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD;;AAAA;AAAA;AAAA;AAAA,iBAaHb,GAbG,CAAN;;AADqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;AAiBAV,GAAG,CAACoB,IAAJ,CAAS,iCAAT;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA4C,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACfD,GAAG,CAACe,IADW,EAClCC,QADkC,aAClCA,QADkC,EACxBC,IADwB,aACxBA,IADwB;AAEpCb,YAAAA,WAFoC,GAEtBJ,GAAG,CAACK,MAAJ,CAAWC,IAFW;AAI1CJ,YAAAA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAC,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqBA,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCa,OAAzC,CAAiD;AAAEF,0BAAAA,IAAI,EAAEF;AAAR,yBAAjD,CADrB;;AAAA;AACCK,wBAAAA,WADD;AAAA;AAAA,+BAECN,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCiB,SAAzC,CAAmD;AAAEN,0BAAAA,IAAI,EAAEF;AAAR,yBAAnD,EAA0E;AAC9E,kCAAQ;AACNc,4BAAAA,QAAQ,EAAET,WAAW,CAACS,QAAZ,CAAqBC,MAArB,CAA4B;AAAEH,8BAAAA,QAAQ,EAARA,QAAF;AAAYC,8BAAAA,IAAI,EAAJA;AAAZ,6BAA5B;AADJ;AADsE,yBAA1E,CAFD;;AAAA;AAAA;AAAA,+BAO4Bd,EAAE,CAACI,UAAH,CAAcb,gBAAgB,CAACC,QAA/B,EAAyCa,OAAzC,CAAiD;AAAEF,0BAAAA,IAAI,EAAEF;AAAR,yBAAjD,CAP5B;;AAAA;AAOCU,wBAAAA,kBAPD;AAQLb,wBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBgB,kBAArB;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD;;AAAA;AAAA;AAAA;AAAA,iBASHb,GATG,CAAN;;AAJ0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA;AAgBAV,GAAG,CAAC6B,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB;;AAGA,IAAMpB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOqB,UAAP,EAAmBtB,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEUuB,qBAAYC,OAAZ,CAAoBjC,QAApB,EAA8B;AAAEkC,cAAAA,eAAe,EAAE;AAAnB,aAA9B,CAFV;;AAAA;AAELC,YAAAA,MAFK;AAGLxB,YAAAA,EAHK,GAGAwB,MAAM,CAACxB,EAAP,CAAUV,MAAV,CAHA;AAAA;AAAA,mBAKL8B,UAAU,CAACpB,EAAD,CALL;;AAAA;AAOXwB,YAAAA,MAAM,CAACC,KAAP;AAPW;AAAA;;AAAA;AAAA;AAAA;AASX3B,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AAAE+B,cAAAA,OAAO,EAAE,wBAAX;AAAqCC,cAAAA,KAAK;AAA1C,aAArB;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAN5B,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst app = express();\r\nconst mongoURL = 'mongodb://localhost:27017';\r\nconst blogDb = 'my-blog';\r\nconst blogDbCollection = {\r\n  articles: 'articles'\r\n};\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.get(\"/api/articles/:name\", async (req, res) => {\r\n  withDB(async (db) => {\r\n    const articleName = req.params.name;\r\n\r\n    const articleInfo = await db.collection(blogDbCollection.articles).findOne({ name: articleName });\r\n    res.status(200).json(articleInfo);\r\n  }, res);  \r\n})\r\n\r\napp.post(\"/api/articles/:name/upvote\", async (req, res) => {\r\n  withDB(async (db) => {\r\n    const articleName = req.params.name;\r\n\r\n    const articleInfo = await db.collection(blogDbCollection.articles).findOne({ name: articleName });\r\n    await db.collection(blogDbCollection.articles).updateOne({ name: articleName }, {\r\n      '$set': {\r\n        upvotes: articleInfo.upvotes + 1\r\n      }\r\n    });\r\n\r\n    const updatedArticleInfo = await db.collection(blogDbCollection.articles).findOne({ name: articleName });\r\n\r\n    res.status(200).json(updatedArticleInfo);\r\n  }, res);\r\n});\r\n\r\napp.post(\"/api/articles/:name/add-comment\", async (req, res) => {\r\n  const { userName, text } = req.body;\r\n  const articleName = req.params.name;\r\n\r\n  withDB(async (db) => {\r\n    const articleInfo = await db.collection(blogDbCollection.articles).findOne({ name: articleName });\r\n    await db.collection(blogDbCollection.articles).updateOne({ name: articleName }, {\r\n      '$set': {\r\n        comments: articleInfo.comments.concat({ userName, text })\r\n      }\r\n    });\r\n    const updatedArticleInfo = await db.collection(blogDbCollection.articles).findOne({ name: articleName });\r\n    res.status(200).json(updatedArticleInfo);\r\n  }, res);\r\n});\r\n\r\napp.listen(8010, () => console.log(\"listening on port 8010\"));\r\n\r\n\r\nconst withDB = async (operations, res) => {\r\n  try {\r\n    const client = await MongoClient.connect(mongoURL, { useNewUrlParser: true });\r\n    const db = client.db(blogDb);\r\n\r\n    await operations(db);\r\n\r\n    client.close();\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error connecting to db', error }); \r\n  }\r\n}\r\n"],"file":"server.js"}